{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tiny-listener \u00b6 Introduction \u00b6 Tiny-listener is a lightweight event framework with Python 3.6+. Requirements \u00b6 Python 3.6+ Installation \u00b6 $ pip install tiny-listener Why use tiny-listener \u00b6 \u2714 Pure Python. \u2714 Lighting-fast, based on native coroutine. \u2714 100% test coverage. Example \u00b6 Create a file example.py with: from tiny_listener import Listener , Event class App ( Listener ): async def listen ( self ): self . fire ( \"Say hi to Alice\" ) self . fire ( \"Say hi to Bob\" ) self . fire ( \"Say hi to Carol\" ) app = App () @app . on_event ( \"Say hi to {name} \" ) async def say_hi ( event : Event ): print ( \"Hi,\" , event . params [ \"name\" ]) Run it: $ tiny-listener example:app >>> Hi, Alice >>> Hi, Bob >>> Hi, Carol How it works \u00b6 Create your own Listener and listen something(e.g. port, queue ...): from tiny_listener import Listener , Event class App ( Listener ): async def listen ( self ): self . fire ( \"Say hi to Alice\" ) self . fire ( \"Say hi to Bob\" ) self . fire ( \"Say hi to Carol\" ) Add event handler to your listener: app = App () @app . on_event ( \"Say hi to {name} \" ) async def say_hi ( event : Event ): print ( \"Hi,\" , event . params [ \"name\" ]) Run listener with command: $ tiny-listener example:app Tiny-listener will dispatch every event automatically: >>> Hi, Alice >>> Hi, Bob >>> Hi, Carol","title":"Introduction"},{"location":"#tiny-listener","text":"","title":"Tiny-listener"},{"location":"#introduction","text":"Tiny-listener is a lightweight event framework with Python 3.6+.","title":"Introduction"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"$ pip install tiny-listener","title":"Installation"},{"location":"#why-use-tiny-listener","text":"\u2714 Pure Python. \u2714 Lighting-fast, based on native coroutine. \u2714 100% test coverage.","title":"Why use tiny-listener"},{"location":"#example","text":"Create a file example.py with: from tiny_listener import Listener , Event class App ( Listener ): async def listen ( self ): self . fire ( \"Say hi to Alice\" ) self . fire ( \"Say hi to Bob\" ) self . fire ( \"Say hi to Carol\" ) app = App () @app . on_event ( \"Say hi to {name} \" ) async def say_hi ( event : Event ): print ( \"Hi,\" , event . params [ \"name\" ]) Run it: $ tiny-listener example:app >>> Hi, Alice >>> Hi, Bob >>> Hi, Carol","title":"Example"},{"location":"#how-it-works","text":"Create your own Listener and listen something(e.g. port, queue ...): from tiny_listener import Listener , Event class App ( Listener ): async def listen ( self ): self . fire ( \"Say hi to Alice\" ) self . fire ( \"Say hi to Bob\" ) self . fire ( \"Say hi to Carol\" ) Add event handler to your listener: app = App () @app . on_event ( \"Say hi to {name} \" ) async def say_hi ( event : Event ): print ( \"Hi,\" , event . params [ \"name\" ]) Run listener with command: $ tiny-listener example:app Tiny-listener will dispatch every event automatically: >>> Hi, Alice >>> Hi, Bob >>> Hi, Carol","title":"How it works"},{"location":"http-listener/","text":"HTTP Listener \u00b6 TODO","title":"HTTP listener"},{"location":"http-listener/#http-listener","text":"TODO","title":"HTTP Listener"},{"location":"mqtt-listener/","text":"MQTT Listener \u00b6 TODO","title":"MQTT listener"},{"location":"mqtt-listener/#mqtt-listener","text":"TODO","title":"MQTT Listener"},{"location":"tcp-listener/","text":"TCP Listener \u00b6 TODO","title":"TCP listener"},{"location":"tcp-listener/#tcp-listener","text":"TODO","title":"TCP Listener"}]}